server {
    # redirect from http to https
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    listen   443 ssl;
    # we use a real domain name instead localhost for testing
    # any production-ready registry must use a real hostname
    server_name      example.org;
    index index.html index.htm;    

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;
    
    # tls enable
    ssl_certificate     /etc/letsencrypt/live/example.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;

    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # forward all traffic 
    # all requests are proxied to the running registry on port 5000
    location /v2/ {
        
        # just give a name
        auth_basic "registry.example.org";
        # password file
	auth_basic_user_file /auth/pwd;
	
        # an explicit HOST header has been set using proxy_set_header directive
        proxy_set_header HOST $proxy_host;

        # X-Real-IP is set to $remote_addr variable that contains the actual client IP
        proxy_set_header X-Real-IP $remote_addr;

        # X-Forwarded-For is another header set here, which contains $proxy_add_x_forwarded_for. This variable contains a list of $remote_addr - client IPs - separated by a comma.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://docker-registry;
    }

    location / {

        proxy_set_header HOST $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://registry-ui;
    }

}

upstream docker-registry {
    server registry:5000;
}

upstream registry-ui {
    server registryui:8080;
}

